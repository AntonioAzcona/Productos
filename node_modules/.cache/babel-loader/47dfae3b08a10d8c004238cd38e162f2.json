{"ast":null,"code":"var _jsxFileName = \"/Users/azcona/Desktop/payment/src/components/TablePayment.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'name',\n  label: 'Sku',\n  minWidth: 100\n}, {\n  id: 'code',\n  label: 'Name',\n  minWidth: 100\n}, {\n  id: 'code',\n  label: 'Quantity',\n  minWidth: 100\n}, {\n  id: 'code',\n  label: 'Price',\n  minWidth: 100\n} // {\n//   id: 'population',\n//   label: 'Population',\n//   minWidth: 170,\n//   align: 'right',\n//   format: (value: number) => value.toLocaleString('en-US'),\n// },\n// {\n//   id: 'size',\n//   label: 'Size\\u00a0(km\\u00b2)',\n//   minWidth: 170,\n//   align: 'right',\n//   format: (value: number) => value.toLocaleString('en-US'),\n// },\n// {\n//   id: 'density',\n//   label: 'Density',\n//   minWidth: 170,\n//   align: 'right',\n//   format: (value: number) => value.toFixed(2),\n// },\n];\n\n// function createData(\n//   name: string,\n//   code: string,\n//   population: number,\n//   size: number,\n// ): Data {\n//   const density = population / size;\n//   return { name, code, population, size, density };\n// }\n// const products = [\n//   createData('India', 'IN', 1324171354, 3287263),\n//   createData('China', 'CN', 1403500365, 9596961),\n//   createData('Italy', 'IT', 60483973, 301340),\n//   createData('United States', 'US', 327167434, 9833520),\n//   createData('Canada', 'CA', 37602103, 9984670),\n//   createData('Australia', 'AU', 25475400, 7692024),\n//   createData('Germany', 'DE', 83019200, 357578),\n//   createData('Ireland', 'IE', 4857000, 70273),\n//   createData('Mexico', 'MX', 126577691, 1972550),\n//   createData('Japan', 'JP', 126317000, 377973),\n//   createData('France', 'FR', 67022000, 640679),\n//   createData('United Kingdom', 'GB', 67545757, 242495),\n//   createData('Russia', 'RU', 146793744, 17098246),\n//   createData('Nigeria', 'NG', 200962417, 923768),\n//   createData('Brazil', 'BR', 210147125, 8515767),\n// ];\nfunction TablePay(_ref) {\n  _s();\n\n  let {\n    products\n  } = _ref;\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [myProducts, setMyProducts] = [products];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                top: 57,\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: myProducts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: myProducts.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TablePay, \"65nbIEELuFY2eeUXbED/8VsHrEQ=\");\n\n_c = TablePay;\nexport default TablePay;\n\nvar _c;\n\n$RefreshReg$(_c, \"TablePay\");","map":{"version":3,"sources":["/Users/azcona/Desktop/payment/src/components/TablePayment.js"],"names":["React","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","minWidth","TablePay","products","page","setPage","useState","rowsPerPage","setRowsPerPage","myProducts","setMyProducts","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","width","maxHeight","map","column","align","top","slice","row","format","code","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\n\ninterface Column {\n  id: 'name' | 'code' | 'population' | 'size' | 'density';\n  label: string;\n  minWidth?: number;\n  align?: 'right';\n  format?: (value: number) => string;\n}\n\nconst columns: Column[] = [\n  { id: 'name', label: 'Sku', minWidth: 100 },\n  { id: 'code', label: 'Name', minWidth: 100 },\n  { id: 'code', label: 'Quantity', minWidth: 100 },\n  { id: 'code', label: 'Price', minWidth: 100 },\n  \n  // {\n  //   id: 'population',\n  //   label: 'Population',\n  //   minWidth: 170,\n  //   align: 'right',\n  //   format: (value: number) => value.toLocaleString('en-US'),\n  // },\n  // {\n  //   id: 'size',\n  //   label: 'Size\\u00a0(km\\u00b2)',\n  //   minWidth: 170,\n  //   align: 'right',\n  //   format: (value: number) => value.toLocaleString('en-US'),\n  // },\n  // {\n  //   id: 'density',\n  //   label: 'Density',\n  //   minWidth: 170,\n  //   align: 'right',\n  //   format: (value: number) => value.toFixed(2),\n  // },\n];\n\ninterface Data {\n  name: string;\n  code: string;\n  population: number;\n  size: number;\n  density: number;\n}\n\n// function createData(\n//   name: string,\n//   code: string,\n//   population: number,\n//   size: number,\n// ): Data {\n//   const density = population / size;\n//   return { name, code, population, size, density };\n// }\n\n// const products = [\n//   createData('India', 'IN', 1324171354, 3287263),\n//   createData('China', 'CN', 1403500365, 9596961),\n//   createData('Italy', 'IT', 60483973, 301340),\n//   createData('United States', 'US', 327167434, 9833520),\n//   createData('Canada', 'CA', 37602103, 9984670),\n//   createData('Australia', 'AU', 25475400, 7692024),\n//   createData('Germany', 'DE', 83019200, 357578),\n//   createData('Ireland', 'IE', 4857000, 70273),\n//   createData('Mexico', 'MX', 126577691, 1972550),\n//   createData('Japan', 'JP', 126317000, 377973),\n//   createData('France', 'FR', 67022000, 640679),\n//   createData('United Kingdom', 'GB', 67545757, 242495),\n//   createData('Russia', 'RU', 146793744, 17098246),\n//   createData('Nigeria', 'NG', 200962417, 923768),\n//   createData('Brazil', 'BR', 210147125, 8515767),\n// ];\n\nfunction TablePay({ products }) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [myProducts, setMyProducts] = [products]\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ top: 57, minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {myProducts\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={myProducts.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\nexport default TablePay;\n"]},"metadata":{},"sourceType":"module"}